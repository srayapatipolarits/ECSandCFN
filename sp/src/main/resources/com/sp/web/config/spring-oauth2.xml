<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
	    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<!-- HTTP Root Access configuration -->
	<sec:http pattern="/rest/**" entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true" auto-config="false">
		<sec:intercept-url pattern="/rest/alexa/**"
			access="#oauth2.hasScope('read') or (!#oauth2.isOAuth() and hasRole('ROLE_USER'))" />
		<sec:intercept-url pattern="/rest/user/create"
			access="#oauth2.hasScope('write') and hasRole('RestHiringCreate')" />	
		<sec:intercept-url pattern="/rest/**"
			access="#oauth2.hasScope('read') or (!#oauth2.isOAuth())" />
		<sec:custom-filter ref="resourceServerFilter"
			before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
		<sec:expression-handler ref="oauthWebExpressionHandler" />
	</sec:http>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<!-- OAuth2 Authentication Entry Point -->
	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="conference" />
	</bean>

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<!-- OAuth2 Token Generation Services -->
	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<!-- <property name="accessTokenValiditySeconds" value="5" /> -->
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="tokenStore"
		class="com.sp.web.mvc.signin.oauth.mongodb.OAuth2RepositoryTokenStore" />

	<bean id="approvalStore"
		class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<bean id="userApprovalHandler"
		class="com.sp.web.mvc.signin.oauth.SPApprovalStoreUserApprovalHandler">
		<property name="approvalStore" ref="approvalStore" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="requestFactory">
			<bean
				class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
				<constructor-arg index="0" ref="clientDetails" />
			</bean>
		</property>
	</bean>

	<!-- OAuth2 Authorization Server -->
	<oauth:authorization-server 
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />

		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />

	</oauth:authorization-server>
	<!-- OAuth2 Protected Resources Server -->
	<oauth:resource-server id="resourceServerFilter"
		resource-id="conference" token-services-ref="tokenServices"
		token-extractor-ref="spBearerToken" />

	<bean id="spBearerToken" class="com.sp.web.config.oauth.SPBearerTokenExtractor"></bean>

	<!-- OAuth2 Client Configuration -->
	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="conference/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<!-- OAuth2 Client's Authentication Manager -->
	<sec:authentication-manager id="clientAuthenticationManager">
		<sec:authentication-provider
			user-service-ref="clientDetailsUserService" />
	</sec:authentication-manager>

	<!-- File based client details access -->
	<oauth:client-details-service id="clientDetails">
		<!-- Web Application clients -->
		<oauth:client client-id="alexa-skill" secret=""
			authorities="ROLE_CLIENT" authorized-grant-types="authorization_code"
			resource-ids="conference" scope="read,write" autoapprove="true" />
			<oauth:client client-id="medix" secret="vnsjzilapindknuw#2%sjd"
			authorities="ROLE_CLIENT" authorized-grant-types="authorization_code,password,refresh_token"
			resource-ids="conference" scope="read,write" autoapprove="true" />
	</oauth:client-details-service>

	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true"
		jsr250-annotations="enabled" secured-annotations="enabled">
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

</beans>