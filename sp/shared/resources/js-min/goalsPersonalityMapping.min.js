function goalsPersonalityMapping($scope,ajaxService,$timeout,$rootScope,$localStorage,$filter,sharedProperties){function getPersonalityMap(){ajaxService.getAjaxResponse({url:useServices.pmGetAll}).then(function(response){"true"===response.Success?(self.storedPersonalityMap=$filter("orderBy")(response.pratcieAreas,"mappedPersonality",!1),self.mappingUpdated?self.showPersonalityMapping(self.selectedId,self.selectedProfileIndex):self.showPersonalityMapping(self.storedPersonalityMap[0].id,0),self.pMapLoaded=!0):null!==response.error&&sharedProperties.ajaxError(response.error)})}function getPracticeAreas(){ajaxService.getAjaxResponse({url:useServices.paGetAll}).then(function(response){"true"===response.Success?self.storedPracticeAreas=response.pratcieAreas:null!==response.error&&sharedProperties.ajaxError(response.error)})}function showPersonalityMapping(id,index){self.showMapping=!1,self.editMapping=!1,self.isSortable=!1,self.updatedPracticeAreas=[],self.activePersonality={},self.updatedGoalIdList=[],angular.forEach(self.storedPersonalityMap,function(i,j){if(i.id===id)return self.selectedProfileIndex=index,self.selectedId=id,self.activePersonality=angular.copy(self.storedPersonalityMap[j]),self.activePersonalityCopy=angular.copy(self.storedPersonalityMap[j]),self.showMapping=!0,self.strengthInputField=angular.copy(self.activePersonality.swotProfileMap.Strengths),self.weaknessInputField=angular.copy(self.activePersonality.swotProfileMap.Weakness),self.oppurtunityInputField=angular.copy(self.activePersonality.swotProfileMap.Opportunities),self.threatInputField=angular.copy(self.activePersonality.swotProfileMap.Threats),!1})}function generatePaList(){self.isPaListUpdated=!1,self.updatedPracticeAreas=[];var count1=0,count2=0,activeGoalIds=[];jQuery.each(self.activePersonalityCopy.goals,function(i){activeGoalIds.push(self.activePersonalityCopy.goals[i].id),count1++}),count1===self.activePersonalityCopy.goals.length&&jQuery.each(self.storedPracticeAreas,function(i){var id=self.storedPracticeAreas[i].id;-1===jQuery.inArray(id,activeGoalIds)&&self.updatedPracticeAreas.push(self.storedPracticeAreas[i]),count2++}),count2===self.storedPracticeAreas.length&&(self.activePersonality=angular.copy(self.activePersonalityCopy),self.isPaListUpdated=!0,self.selectedPa="")}function removePracticeArea(id){jQuery.each(self.activePersonalityCopy.goals,function(i,j){if(self.activePersonalityCopy.goals[i].id===id)return self.activePersonalityCopy.goals.splice(i,1),self.generatePaList(),self.selectedPa="",!1})}function addPracticeArea(id){var goalInfo="";jQuery.each(self.storedPracticeAreas,function(i){if(id===self.storedPracticeAreas[i].id)return goalInfo=angular.copy(self.storedPracticeAreas[i]),!1}),void 0!==goalInfo&&null!==goalInfo&&(self.activePersonalityCopy.goals.push({id:goalInfo.id,name:goalInfo.name}),self.generatePaList(),self.selectedPa="")}function updatePersonalityMap(){var counter=0;self.updatedGoalIdList=[],$("#pa-sort-list").find("li").each(function(value,index){self.updatedGoalIdList.push($(this).attr("data-id")),counter++}),counter===$("#pa-sort-list").find("li").length&&ajaxService.getAjaxResponse({url:useServices.pmUpdate,data:$.param({personalityType:self.activePersonality.personalityType,goalIds:self.updatedGoalIdList.join()})}).then(function(response){"true"===response.Success?(sharedProperties.growlMessage($rootScope.pullInterNationalization("personality.mapping.updated")),self.updatedGoalIdList=[],self.mappingUpdated=!0,self.getPersonalityMap()):null!==response.error&&sharedProperties.ajaxError(response.error)})}function initSortable(){var _el=document.getElementById("pa-sort-list");!1===self.isSortable&&(void 0===self.sortable?self.sortable=new Sortable(_el,{group:"name",animation:150,onEnd:function(e){self.activePersonalityCopy.goals.move(e.oldIndex,e.newIndex)}}):(self.sortable.destroy(),$timeout(function(){self.sortable=new Sortable(_el,{group:"name",animation:150,onEnd:function(e){self.activePersonalityCopy.goals.move(e.oldIndex,e.newIndex)}})},100)),self.isSortable=!0)}function displayPracticeAreas(){self.mappingType="PA",self.editMapping=!1}function displaySwot(){self.mappingType="SWOT",self.editMapping=!1}function editAction(){"PA"===self.mappingType&&self.generatePaList()}function updateAction(){"PA"===self.mappingType?self.updatePersonalityMap():self.updateSwotMapping()}function cancelUpdate(){self.editMapping=!1,self.showPersonalityMapping(self.selectedId,self.selectedProfileIndex)}function addInputField(param,type){switch(type){case"S":self.strengthInputField.push(self.strengthInputField.length);break;case"W":self.weaknessInputField.push(self.weaknessInputField.length);break;case"O":self.oppurtunityInputField.push(self.oppurtunityInputField.length);break;case"T":self.threatInputField.push(self.threatInputField.length)}}function removeInputField(index,type){switch(type){case"S":self.strengthInputField.splice(index,1),self.activePersonality.swotProfileMap.Strengths.splice(index,1);break;case"W":self.weaknessInputField.splice(index,1),self.activePersonality.swotProfileMap.Weakness.splice(index,1);break;case"O":self.oppurtunityInputField.splice(index,1),self.activePersonality.swotProfileMap.Opportunities.splice(index,1);break;case"T":self.threatInputField.splice(index,1),self.activePersonality.swotProfileMap.Threats.splice(index,1)}}function updateSwotMapping(){if("VALID"!==isValidData())self.editMapping=!0,sharedProperties.growlMessage("<strong> "+$rootScope.pullInterNationalization("personality.mapping.error")+" "+isValidData()+"</strong>","","glyphicon glyphicon-ban-circle");else{var swotForm={personalityType:self.activePersonality.personalityType,swotProfileMap:self.activePersonality.swotProfileMap};ajaxService.getAjaxResponse({url:useServices.updateSwot,data:swotForm,headers:{"Content-Type":"application/json"}}).then(function(response){"true"===response.Success?(sharedProperties.growlMessage($rootScope.pullInterNationalization("personality.mapping.updated")),self.mappingUpdated=!0,self.getPersonalityMap()):null!==response.error&&sharedProperties.ajaxError(response.error)})}}var self=this,useServices={pmGetAll:"/sp/sysAdmin/personalityMapping/getAll",paGetAll:"/sp/sysAdmin/practiceArea/getAll",pmUpdate:"/sp/sysAdmin/personalityMapping/update",updateSwot:"/sp/sysAdmin/personalityMapping/swot/update"};self.pMapLoaded=!1,self.showMapping=!1,self.editMapping=!1,self.isPaListUpdated=!1,self.selectedPa="",self.selectedProfileIndex=-1,self.selectedId=-1,self.showGoalsList=!1,self.isSortable=!1,self.mappingType="PA",self.mappingUpdated=!1,self.strengthInputField=[0],self.weaknessInputField=[0],self.oppurtunityInputField=[0],self.threatInputField=[0],self.storedPersonalityMap={},self.storedPracticeAreas={},self.activePersonality={},self.activePersonalityCopy=[],self.updatedPracticeAreas=[],self.updatedGoalIdList=[],self.mappingSwotList=[],self.getPersonalityMap=getPersonalityMap,self.getPracticeAreas=getPracticeAreas,self.updatePersonalityMap=updatePersonalityMap,self.showPersonalityMapping=showPersonalityMapping,self.removePracticeArea=removePracticeArea,self.addPracticeArea=addPracticeArea,self.generatePaList=generatePaList,self.initSortable=initSortable,self.displayPracticeAreas=displayPracticeAreas,self.displaySwot=displaySwot,self.editAction=editAction,self.updateAction=updateAction,self.cancelUpdate=cancelUpdate,self.addInputField=addInputField,self.removeInputField=removeInputField,self.updateSwotMapping=updateSwotMapping;var isValidData=function(){for(var j=0;j<self.strengthInputField.length;j++)if(void 0===self.activePersonality.swotProfileMap.Strengths[j]||void 0!==self.activePersonality.swotProfileMap.Strengths[j]&&""===self.activePersonality.swotProfileMap.Strengths[j].trim())return"Strengths";for(var k=0;k<self.weaknessInputField.length;k++)if(void 0===self.activePersonality.swotProfileMap.Weakness[k]||void 0!==self.activePersonality.swotProfileMap.Weakness[k]&&""===self.activePersonality.swotProfileMap.Weakness[k].trim())return"Weakness";for(var l=0;l<self.oppurtunityInputField.length;l++)if(void 0===self.activePersonality.swotProfileMap.Opportunities[l]||void 0!==self.activePersonality.swotProfileMap.Opportunities[l]&&""===self.activePersonality.swotProfileMap.Opportunities[l].trim())return"Opportunities";for(var i=0;i<self.threatInputField.length;i++)if(void 0===self.activePersonality.swotProfileMap.Threats[i]||void 0!==self.activePersonality.swotProfileMap.Threats[i]&&""===self.activePersonality.swotProfileMap.Threats[i].trim())return"Threats";return"VALID"};!function(){self.getPracticeAreas(),self.getPersonalityMap()}()}angular.module("spApp").controller("goalsPersonalityMapping",goalsPersonalityMapping),goalsPersonalityMapping.$inject=["$scope","ajaxService","$timeout","$rootScope","$localStorage","$filter","sharedProperties"];